#+TITLE: DC-ECLECTIC

* Overview

DC-ECLECTIC is a Common Lisp package that provides a collection of utility functions and variables for tasks including logging, time handling, string and list manipulations, file and directory utilities, hashing, permutations, and more. It uses packages like Common Lisp (~cl~), ~trivial-utf-8~, ~sb-thread~, ~sb-ext~, and imports from ~ironclad~ for hashing. Local nicknames are used for ~dc-ds~ (as ~:ds~) and ~ppcre~ (as ~:re~).

The package exports the following symbols, documented below in alphabetical order. Each entry includes the symbol type (function, variable, etc.) where applicable, the function signature (if applicable), and a description based on the source code docstring (if available). Some symbols may lack definitions in the provided source but are exported.

* Functions
** ~all-permutations~

Function: ~(ALL-PERMUTATIONS LIST)~

Returns a list of every permutation of elements in ~LIST~. For example:

#+begin_src lisp
(all-permutations '(1 2 3)) => '((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1))
#+end_src

** ~all-permutations-of-string~

Function: ~(ALL-PERMUTATIONS-OF-STRING S)~

Returns a list of strings representing every permutation of the original string ~S~. For example:

#+begin_src lisp
(all-permutations-of-string "abc") => '("abc" "acb" "bac" "bca" "cab" "cba")
#+end_src

** ~choose-one~

Function: ~(CHOOSE-ONE SEQ &OPTIONAL RSTATE)~

Returns a randomly selected element from ~SEQ~. Returns ~NIL~ if ~SEQ~ is empty. Accepts an optional random state ~RSTATE~.

** ~choose-some~

Function: ~(CHOOSE-SOME SEQ N &OPTIONAL RSTATE)~

Choose ~N~ elements from ~SEQ~ and return a new sequence with those elements, with the new sequence having the same type as ~SEQ~.

~N~ must be an integer that is greater than or equal to 1.

If ~N~ is greater than the length of ~SEQ~, this function returns a copy of ~SEQ~.

If ~N~ is less than 1, then this function returns ~NIL~, even if the sequence is not a list.

This function uses the ~RANDOM~ function, which accepts an optional ~RSTATE~ parameter that you can optionally pass in here.

** ~close-log~

Function: ~(CLOSE-LOG)~

Closes the file stream that was opened by ~OPEN-LOG~. If a file stream is not open (if ~*LOG*~ is ~NIL~), then this function does nothing and returns ~NIL~. If a file stream is open (~*LOG*~ contains a stream), then this function closes the stream and returns ~T~.

** ~comparable-hash-dump~

Function: ~(COMPARABLE-HASH-DUMP HASH &KEY (F-SORT #'STRING<) (F-MAKE-SORTABLE (LAMBDA (K) (FORMAT NIL "~a" K))) FLAT)~

Turns the given hash table into a list of pairs or, if ~FLAT~ is ~T~, into a plist that represents the hash. In the resulting list, the keys are sorted, so that the list can be more easily compared with other lists. ~HASH~ is the hash you want to dump. ~F-SORT~ is the sort predicate, which defaults to sorting strings in ascending order. ~F-MAKE-SORTABLE~ is a function that accepts a key and returns a sortable version of the key. This defaults to turning the key into a string. If the keys to the hash are integers, for example, you can provide an ~F-SORT~ of #'~<~, which sorts integers numerically in ascending order, and you can provide an ~F-MAKE-SORTABLE~ of #'~identity~, which will leave the keys as integers for sorting purposes.

** ~denormalize-list~

Function: ~(DENORMALIZE-LIST LIST MIN MAX &KEY INTEGER)~

Returns a new list with the numbers in ~LIST~, which are floating-point numbers between 0 and 1, expanded to the range ~MAX~ - ~MIN~, such that the number 1.0 is converted to ~MAX~, the number 0.0 is converted to ~MIN~, and all the other numbers fall in the range ~MIN~ to ~MAX~. If ~INTEGER~ is ~T~, the new list contains integers. Otherwise, the new list contains floating-point numbers.

** ~directory-exists-p~

Function: ~(DIRECTORY-EXISTS-P PATH)~

Returns a boolean value indicating if the directory specified by ~PATH~ exists.

** ~distinct-elements~

Function: ~(DISTINCT-ELEMENTS SEQUENCE &KEY (KEY #'IDENTITY))~

Accepts a sequence of elements (list or vector) and returns a new sequence of the same type with distinct elements from the original sequence. If the elements in the sequence are hash tables, plists, or objects with methods, then you can provide a value or function for the ~:key~ parameter. If you provide a value, the function will use the value as the key of the element, and the value of the key will represent the unique signature of the element. If you provide a function, then the function will be applied to the element to compute the element's unique signature.

** ~distinct-values~

Function: ~(DISTINCT-VALUES LIST)~

Alias for ~distinct-elements~.

** ~dlog~

Function: ~(DLOG FORMAT-STRING &REST VALUES)~

If the log file is open (see ~OPEN-LOG~), this function creates a string by calling ~FORMAT~ with ~FORMAT-STRING~ and with ~VALUES~, writes the string to the log stream, and returns the string. If the log file is not open, this function does nothing.

** ~elapsed-time~

Function: ~(ELAPSED-TIME START-TIME)~

Computes the elapsed time since ~START-TIME~ (from ~mark-time~).

** ~existing-n-gram-strings~

Function: ~(EXISTING-N-GRAM-STRINGS CHARS COUNT HASH)~

Works like ~n-gram-strings~, but excludes any n-grams not present as keys in ~HASH~.

** ~existing-permutations-of-string~

Function: ~(EXISTING-PERMUTATIONS-OF-STRING S HASH)~

Works just like ~all-permutations-of-string~, but excludes any permutations of ~S~ that are not among the keys in ~HASH~.

** ~file-exists-p~

Function: ~(FILE-EXISTS-P PATH)~

Returns a boolean value indicating if the file specified by ~PATH~ exists.

** ~file-extension~

Function: ~(FILE-EXTENSION PATH)~

Returns a string consisting of the file extension for the file name given in ~PATH~.

** ~filename-only~

Function: ~(FILENAME-ONLY FILENAME)~

Retrieves the filename (filename only, without the path) of ~FILENAME~.

** ~flatten~

Function: ~(FLATTEN L)~

Given a nested list ~L~, return a flat list. If an array or other sequence is among the elements of ~L~, the sequence is not flattened, but treated as a single element.

** ~freeze~

Function: ~(FREEZE OBJECT)~

Serializes ~OBJECT~ to a string using ~PRIN1-TO-STRING~.

** ~get-unix-time~

Function: ~(GET-UNIX-TIME)~

Returns the current unix time, as an integer. Unix time is the number of seconds elapsed since the epoch, January 1, 1970 at 00:00:00 UTC.

** ~hash-hmac-256~

Function: ~(HASH-HMAC-256 SECRET TEXT)~

Hash ~TEXT~ using ~SECRET~ and hmac-sha-256 and return a hex representation of the hash.

** ~hash-keys~

Function: ~(HASH-KEYS HASH)~

Returns a list of keys from the hash table.

** ~hash-string~

Function: ~(HASH-STRING STRING &KEY (SALT "") (SIZE 128))~

Hash ~STRING~ and return a hex representation of the hash. Accepts optional ~:salt~ and ~:size~ (defaults to 128).

** ~hash-values~

Function: ~(HASH-VALUES HASH)~

Returns a list of values from the hash table.

** ~hashify-list~

Function: ~(HASHIFY-LIST LIST &KEY (METHOD :COUNT) F-KEY HASH-KEY PLIST-KEY ALIST-KEY (F-VALUE (LAMBDA (KEY-RAW KEY-CLEAN VALUE) (DECLARE (IGNORE KEY-RAW KEY-CLEAN)) VALUE)) (INITIAL-VALUE 0))~

Creates a hash table from ~LIST~ and returns the hash table, according to ~METHOD~. Supported methods are ~:COUNT~, ~:PLIST~, ~:ALIST~, ~:INDEX~, AND ~:CUSTOM~.

~:COUNT~

    With the ~:COUNT~ method, which the function uses by default, the function creates a hash table in which each key is an item of the list and the associated value for each key is the incidence of the item in the list. For example:

#+begin_src lisp
(hashify-list '(7 8 7 7 8 9))
#+end_src

    gives you a hash table that looks like this:

    {7: 3, 8: 2, 9: 1}

~:ALIST~ and ~:PLIST~

    The ~:ALIST~ and ~:PLIST~ methods convert the list into a hash that conceptually represent the same map as the list. Alists and plists both consist of collections of key/value pairs. Alists look like this:

    '((key1 . value1) (key2 . value2) (key3 . value3)...)

    Plists look like this:

    '(:key1 value1 :key2 value2 :key3 value3 ...)

    If a key repeats in one of these lists, its value simply overwrites the value of the repeated key. However, you can change that behavior. See the description of the ~:CUSTOM~ method for information on how to do that.

~:INDEX~

    The ~:index~ method causes the values in the list to become the keys in the hash table. The value associated with each key should be an increasing integer, starting with 0. Thus, the list '(a b c) becomes the hash {a: 1, b: 2, c: 3}.

    If the objects in the list that you're indexing are hash tables, then you can specify the object key for the value that the function should use as a key in the resulting hash. That object key should be present in every object in the list. This allows you to index a list of hash tables by some specific value in the hash table. Consider the following example:

    [
      {id: "a-001", first: "john", last: "doe"},
      {id: "a-002", first: "jane", last: "doe"}
    ]

    If you specify ~:method~ ~:index~ ~:hash-key~ "id", this function will create a hash table that looks like this:

    {
      "a-001": {id: "a-001", first: "john", last: "doe"},
      "a-002": {id: "a-002", first: "jane", last: "doe"}
    }

    And, voilÃ , you no longer need to iterate through a list to find your object.

    If the objects are plists, and you specify the index with ~plist-key~, you'll see the same behavior with the plist as we demonstrated above for hash tables.

    ~HASH-KEY~ and ~PLIST-KEY~ are just shortcuts to save you from having to write some code for ~F-KEY~. You can specify only one of ~HASH-KEY~, ~PLIST-KEY~, and ~F-KEY~.

~:CUSTOM~

    The ~:CUSTOM~ method requires that you provide functions for computing the keys and values that the function inserts into the resulting hash.

    Use ~F-KEY~ to provide a function that accepts an element from ~LIST~ and returns a computed hash key. Here are some examples ~F-KEY~ of acceptable definitions:

        - #'~identity~
        - #'~string-upcase~
        - (lambda (~x~) (~zerop~ (~mod~ ~x~ 10)))

    Use ~F-VALUE~ to provide a function that accepts an element from ~LIST~, the computed key (which might be different from the element), and the value that's currently associated with the computed key in the resulting hash table. Here are some examples:

        - (lambda (~element~ ~computed-key~ ~value~)
            (declare (ignore ~element~ ~computed-key~))
            ~value~)
        - (lambda (~element~ ~computed-key~ ~value~)
            (declare (ignore ~element~ ~value~))
            (~incf~ ~value~))

    If there's no hash value associated with the computed key, then the value specified by ~:INITIAL-VALUE~ is used.

** ~index-of-max~

Generic function: ~(INDEX-OF-MAX LIST-OR-VECTOR)~

Returns the index of the maximum value in a list or vector. Has methods for vectors and lists.

** ~join-paths~

Function: ~(JOIN-PATHS &REST PATH-PARTS)~

Joins parameters (collected in ~PATH-PARTS~) into a unix-like file path, inserting slashes where necessary.

** ~log-entry~

Function: ~(LOG-ENTRY FORMAT-STRING &REST VALUES)~

Creates a string by calling the ~FORMAT~ function with ~FORMAT-STRING~ and ~VALUES~, prepends the result with a timestamp, and returns a string that looks like a log entry.

** ~log-it~

Function: ~(LOG-IT STREAM FORMAT-STRING &REST VALUES)~

Concatenates one or more strings (collected in ~MESSAGES~), precedes the result with a timestamp, writes to ~STREAM~ a string that looks like a log entry. Returns the same string that was written to ~STREAM~.

** ~mark-time~

Function: ~(MARK-TIME)~

Returns the current internal real time as a float.

** ~n-gram-strings~

Function: ~(N-GRAM-STRINGS CHARS COUNT)~

Accepts ~CHARS~, a string, and ~COUNT~, an integer, and returns all the possible combinations of length ~COUNT~ of the characters in ~CHARS~. For example,

#+begin_src lisp
(n-gram-strings "ab" 2) => '("aa" "ab" "ba" "bb")
#+end_src

(Note: The docstring example was for "abc" 2, but adjusted for brevity; full combinations are generated recursively.)

** ~n-grams~

Function: ~(N-GRAMS LIST COUNT)~

Returns n-grams (lists) of length ~COUNT~ from the input ~LIST~.

** ~normalize-list~

Function: ~(NORMALIZE-LIST LIST &KEY MAX MIN)~

Return a new list with new values between 0.0 and 1.0. ~MAX~ is the largest value that ~LIST~ can hold, and ~MIN~ is the smallest. Each new value ~N~ is computed from the corresponding old value ~O~ in ~LIST~, as follows: ~N~ = (~O~ - ~MIN~) / (~MAX~ - ~MIN~). If you don't provide ~MAX~ and ~MIN~, this function does an initial pass through list where it sets ~MAX~ and ~MIN~ to the largest number and the smallest number in ~LIST~, respectively. Therefore, you can improve the performance of this function if you already know those values. Furthermore, in some cases the list may not even contain the values for ~MAX~ and ~MIN~ that you need.

** ~open-log~

Function: ~(OPEN-LOG &KEY (FILEPATH "/tmp/neurons.log") (APPEND T))~

Opens a log file, allowing the ~DLOG~ function to cease to be a no-op. ~FILEPATH~ represents the path to the log file. ~APPEND~ indicates that if a file exists at ~FILEPATH~, call to ~dlog~ should append log entries to the end of the existing file. If ~APPEND~ is ~NIL~, the file at ~FILEPATH~ is cleared. Regardless of the value of ~APPEND~, if the file at ~FILEPATH~ doesn't exist, this function creates it.

If ~*LOG*~ is set (if this function was called and ~CLOSE-LOG~ was never called), then this function does nothing and returns ~NIL~. If ~*LOG*~ is ~NIL~ (if this function has not been called or it was called and then ~CLOSE-LOG~ was called), then this function opens the log file, sets ~*LOG*~ to the file stream, and returns the file stream.

** ~path-only~

Function: ~(PATH-ONLY FILENAME)~

Retrieves the path (path only, without the filename) of ~FILENAME~.

** ~path-type~

Function: ~(PATH-TYPE PATH)~

Returns ~:FILE~, ~:DIRECTORY~, or ~:NOT-FOUND~, depending on what ~PATH~ points to.

** ~plist-keys~

Function: ~(PLIST-KEYS PLIST)~

Returns a list of keys from the plist.

** ~plistp~

Function: ~(PLISTP LIST)~

Returns ~T~ if ~LIST~ is a plist (even length, all keys are keywords).

** ~range~

Function: ~(RANGE START END &KEY (STEP 1) (FILTER #'IDENTITY) SHUFFLE)~

Returns a list of values between ~START~ and ~END~ (inclusive), skipping values by ~STEP~, filtering remaining values with the function in ~FILTER~, and shuffling the remaining values if ~SHUFFLE~ is true. ~STEP~ defaults to 1, ~FILTER~ defaults to allowing all values through, and ~SHUFFLE~ default to nil.

** ~replace-extension~

Function: ~(REPLACE-EXTENSION FILENAME NEW-EXTENSION)~

This function replaces the file extension in ~FILENAME~ with the file extension provided in ~NEW-EXTENSION~.

** ~shuffle~

Function: ~(SHUFFLE SEQ &OPTIONAL RSTATE)~

Return a sequence with the same elements as the given sequence ~S~, but in random order (shuffled). Accepts optional ~RSTATE~.

** ~slurp~

Function: ~(SLURP FILENAME)~

Reads the entire contents of ~FILENAME~ into a string.

** ~spew~

Function: ~(SPEW STRING FILENAME)~

Writes ~STRING~ to ~FILENAME~, overwriting if exists.

** ~split-n-trim~

Function: ~(SPLIT-N-TRIM STRING &KEY (ON-REGEX "\\s+") (FAT "^\\s+|\\s+$"))~

Splits ~STRING~ into substrings on ~ON-REGEX~, then trims ~FAT~ from each substring. The ~ON-REGEX~ parameter value, which is optional, defaults to "\\s+", which is to say that the string is split into a list of words at the whitespace boundaries. The default value for ~FAT~, which is also optional, "^\\s+|\\s+$", causes this function to trim whitespace from the beginning and end of each substring. Here's an example:

#+begin_src lisp
(split-n-trim "Hello  beautiful      world!") => '("Hello" "beautiful" "world!")
#+end_src

** ~thaw~

Function: ~(THAW STRING)~

Deserializes ~STRING~ back to an object using ~READ-FROM-STRING~ (with ~*READ-EVAL*~ ~NIL~ for safety).

** ~timestamp-string~

Function: ~(TIMESTAMP-STRING &KEY (UNIVERSAL-TIME (GET-UNIVERSAL-TIME)) (TIMEZONE 0) (FORMAT "%Y-%M-%DT%h:%m:%s"))~

Returns the given time (or the current time, in universal time format) formatted according to the ~FORMAT~ parameter, followed by an optional value for ~STRING~. If ~STRING~ is provided, the function adds a space to the result and then appends the string to that. The ~FORMAT~ string can contain any characters. This function will replace the format characters Y, M, D, h, m, and s, with numbers representing the year, month, day, hour, minute, and second, respectively. All the numbers are 2 digits long, except for the year, which is 4 digits long.

** ~to-ascii~

Function: ~(TO-ASCII STRING &KEY (REPLACEMENT-CHAR #\?) (PRINTABLE-ONLY T))~

In ~STRING~, replaces non-ASCII characters with ~REPLACEMENT-CHAR~, which defaults to the question mark. If ~PRINTABLE-ONLY~ is true, only printable ASCII characters are kept, with the rest being replaced by ~REPLACEMENT-CHAR~.

** ~trim~

Function: ~(TRIM S &OPTIONAL (FAT "^\\s+|\\s+$"))~

Trim ~FAT~ from the string in ~S~. The ~FAT~ parameter is optional and defaults to "^\\s+|\\s+$", which means "Whitespace at the beginning or end of the string".

** ~trim-whitespace~

Function: ~(TRIM-WHITESPACE S)~

Trims all whitespace characters from ~S~.

** ~universal-time-to-unix-time~

Function: ~(UNIVERSAL-TIME-TO-UNIX-TIME &OPTIONAL UNIVERSAL-TIME)~

Converts ~UNIVERSAL-TIME~ to unix time. If you don't provide UNIVERSAL-TIME, this function returns the current unix time.

Unix time is the number of seconds elapsed since the epoch, January 1, 1970 at 00:00:00 UTC.

~UNIVERSAL-TIME~ is the number of seconds elapsed since January 1, 1900 at 00:00:00 UTC.

** ~unix-time-to-universal-time~

Function: ~(UNIX-TIME-TO-UNIVERSAL-TIME &OPTIONAL UNIX-TIME)~

Converts unix time to universal time. If you don't provide a unix time, this function returns the current universal time, as an integer.

UNIX-TIME is the number of seconds elapsed since the epoch, January 1, 1970 at 00:00:00 UTC.

Universal time is the number of seconds elapsed since January 1, 1900 at 00:00:00 UTC.

** ~verify-string~

Function: ~(VERIFY-STRING STRING REGEX &KEY IGNORE-CASE)~

Return ~T~ if ~STRING~ matches the ~REGEX~ exactly. Use the ~IGNORE-CASE~ parameter if you want case-insensitive matches.
